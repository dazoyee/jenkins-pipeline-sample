def datetime = new Date().format('yyyyMMddHHmmss')

pipeline {
    agent any

    tools {
        jdk 'openjdk11'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
    }

    triggers {
        pollSCM('H * * * *')
    }

    stages {
        stage('Checkout') {
            steps {
                print "===== チェックアウトを開始します ====="
                git url: 'https://github.com/ioridazo/jenkins-pipeline-sample.git', branch: 'develop'
                print "===== チェックアウトを正常に終了しました ====="
            }
        }

        stage('Test') {
            steps {
                print "===== テストを開始します ====="
                bat "./mvnw clean clover:setup"
                bat "./mvnw test surefire-report:report pmd:pmd pmd:cpd jacoco:report spotbugs:spotbugs clover:aggregate clover:clover"
                print "===== テストを正常に終了しました ====="
            }
        }

        stage('Analytics') {
            steps {
                parallel (
                    junit: {
                        junit '**/target/surefire-reports/TEST-*.xml'
                    },
                    jacoco: {
                        jacoco(
                            execPattern: 'target/*.exec',
                            classPattern: 'target/classes',
                            sourcePattern: 'src/main/java',
                            exclusionPattern: 'src/test*'
                        )
                    },
                    pmd: {
                        recordIssues(tools: [pmdParser(pattern: 'target/pmd.xml')])
                    },
                    cpd: {
                        recordIssues(tools: [pmdParser(pattern: 'target/cpd.xml')])
                    },
                    spotBugs: {
                        recordIssues(tools: [spotBugs(pattern: 'target/spotbugsXml.xml', useRankAsPriority: true)])
                    },
                    clover: {
                        clover(
                            cloverReportDir: 'target/site',
                            cloverReportFileName: 'clover.xml',
                            // optional, default is: method=70, conditional=80, statement=80
                            healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                            // optional, default is none
                            unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                            // optional, default is none
                            failingTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0]
                        )
                    }
                )
            }
        }

        stage('Build') {
            steps {
                print "===== ビルドを開始します ====="
                bat "./mvnw package -DskipTests=true"
                archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false
                print "===== ビルドを正常に終了しました ====="
            }
        }

        stage('Upload') {
            steps {
                print "===== ビルド成果物をNexusにアップロードします ====="
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    nexusArtifactUploader (
                        nexusVersion: 'nexus3',
                        credentialsId: 'nexus3',
                        protocol: 'http',
                        nexusUrl: 'localhost:8081',
                        repository: 'maven-snapshots',
                        groupId: pom.groupId,
                        version: pom.version,
                        artifacts: [
                            [
                                artifactId: pom.artifactId,
                                file: 'target/jenkins-pipeline-sample-' + pom.version + '.jar',
                                type: 'jar'
                            ]
                        ]
                    )
                }
                print "===== ビルド成果物を正常にアップロードしました ====="
            }
        }

        stage('Download') {
            steps {
                print "===== Nexusからリリース対象モジュールをダウンロードします ====="
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    env.URL = 'http://localhost:8081' +
                            '/service/rest/v1/search/assets/download' +
                            '?sort=version' +
                            '&repository=maven-snapshots' +
                            '&maven.groupId=' + pom.groupId +
                            '&maven.artifactId=' + pom.artifactId +
                            '&maven.baseVersion=' + pom.version
                            '&maven.extension=jar'
                    env.TMP = 'C:\\jenkins-pipeline-sample\\tmp\\' + datetime + '\\'
                    env.JAR = 'jenkins-pipeline-sample-' + pom.version + '.jar'
                    bat '''
                    mkdir %TMP%
                    bitsadmin /transfer "nexus" "%URL%" %TMP%%JAR%
                    '''
                }
                print "===== リリース対象モジュールを正常にダウンロードしました ====="
            }
        }

        stage('Deploy') {
            steps {
                print "===== デプロイを開始します ====="
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def jar = 'jenkins-pipeline-sample-' + pom.version + '.jar'

                    bat '''
                    sc.exe stop jenkins-pipeline-sample
                    @echo off
                    :DoWhile
                      sc.exe query jenkins-pipeline-sample | findstr STATE | findstr STOPPED
                      if %errorlevel% equ 0 goto DoWhileExit
                    goto DoWhile
                    :DoWhileExit
                    '''
                    echo "*********************"
                    echo "サービスを停止しました。"
                    echo "*********************"
                    bat "sc.exe query jenkins-pipeline-sample"

                    env.DATETIME = datetime
                    env.JAR = jar
                    bat '''
                    cd C:\\jenkins-pipeline-sample\\bin
                    ren jenkins-pipeline-sample.jar jenkins-pipeline-sample.jar.%DATETIME%
                    copy C:\\jenkins-pipeline-sample\\tmp\\%DATETIME%\\%JAR% jenkins-pipeline-sample.jar
                    '''
                    echo "*********************"
                    echo "JARファイルを差し替えました。"
                    echo "*********************"

                    bat '''
                    sc.exe start jenkins-pipeline-sample
                    @echo off
                    :DoWhile
                      sc.exe query jenkins-pipeline-sample | findstr STATE | findstr RUNNING
                      if %errorlevel% equ 0 goto DoWhileExit
                    goto DoWhile
                    :DoWhileExit
                    '''
                    echo "*********************"
                    echo "サービスを起動しました。"
                    echo "*********************"
                    bat "sc.exe query jenkins-pipeline-sample"
                }
                print "===== デプロイを正常に終了しました ====="
            }
        }

        stage('Clean'){
            steps {
                script {
                    RELEASE_SCOPE = input message: 'rollback or complete ?', ok: 'Submit!', parameters: [
                        choice(
                            name: 'RELEASE_SCOPE',
                            choices: 'rollback\ncomplete'
                        )
                    ]

                    switch(RELEASE_SCOPE) {
                        case "rollback":
                            print "===== ロールバックを開始します ====="
                            bat '''
                            sc.exe stop jenkins-pipeline-sample
                            @echo off
                            :DoWhile
                              sc.exe query jenkins-pipeline-sample | findstr STATE | findstr STOPPED
                              if %errorlevel% equ 0 goto DoWhileExit
                            goto DoWhile
                            :DoWhileExit
                            '''
                            echo "*********************"
                            echo "サービスを停止しました。"
                            echo "*********************"
                            bat "sc.exe query jenkins-pipeline-sample"

                            env.DATETIME = datetime
                            bat '''
                            cd C:\\jenkins-pipeline-sample\\bin
                            del jenkins-pipeline-sample.jar
                            @echo off
                            :DoWhile
                              if not exist jenkins-pipeline-sample.jar goto DoWhileExit
                            goto DoWhile
                            :DoWhileExit
                            @echo on
                            ren jenkins-pipeline-sample.jar.%DATETIME% jenkins-pipeline-sample.jar
                            '''
                            echo "*********************"
                            echo "JARファイルを元に戻しました。"
                            echo "*********************"

                            bat '''
                            sc.exe start jenkins-pipeline-sample
                            @echo off
                            :DoWhile
                              sc.exe query jenkins-pipeline-sample | findstr STATE | findstr RUNNING
                              if %errorlevel% equ 0 goto DoWhileExit
                            goto DoWhile
                            :DoWhileExit
                            '''
                            echo "*********************"
                            echo "サービスを起動しました。"
                            echo "*********************"
                            bat "sc.exe query jenkins-pipeline-sample"

                            print "===== ロールバックを正常に終了しました ====="
                        break

                        case "complete":
                            print "===== コンプリートを開始します ====="

                            env.DATETIME = datetime
                            bat '''
                            cd C:\\jenkins-pipeline-sample\\bin
                            del jenkins-pipeline-sample.jar.%DATETIME%
                            '''

                            print "===== コンプリートを正常に終了しました ====="
                        break
                    }
                }
            }
        }
    }
}
